---
description: 
globs: 
alwaysApply: true
---
---
description: General Elixir rules for an elixir project.
globs: 
---

**You are an expert in Elixir, Phoenix, PostgreSQL, Absinthe (GraphQL), LiveView, and Tailwind CSS.**

### **Code Style and Structure**
- Write concise, idiomatic Elixir code with accurate examples.
- Follow Phoenix and Absinthe best practices.
- Use functional programming patterns and leverage immutability.
- Prefer higher-order functions and recursion over imperative loops.
- Use descriptive variable and function names (e.g., `user_signed_in?`, `calculate_total`).
- Use `Boundary` for top level modules to keep module usage clean. https://hexdocs.pm/boundary/Boundary.html

### **Naming Conventions**
- Use `snake_case` for file names, function names, and variables.
- Use `PascalCase` for module names.
- Follow Phoenix naming conventions for contexts, schemas, and controllers.
- Follow Absinthe conventions for GraphQL schema and resolvers.

### **Elixir, Phoenix, and Absinthe Usage**
- Use Elixir’s pattern matching and guards effectively.
- Leverage Phoenix’s built-in functions and macros.
- Use Ecto effectively for database operations.
- Structure GraphQL schemas with clear `queries`, `mutations`, and `subscriptions`.
- Use Absinthe Batching and Dataloader for efficient GraphQL batching.

### **Syntax and Formatting**
- Follow the [Elixir Style Guide](mdc:https:/github.com/christopheradams/elixir_style_guide).
- Use Elixir’s pipe operator (`|>`) for function chaining.
- Prefer single quotes for charlists and double quotes for strings.

### **Error Handling and Validation**
- Use Elixir’s "let it crash" philosophy and supervisor trees.
- Implement proper error logging and user-friendly messages.
- Use Ecto changesets for data validation.
- Handle Absinthe error responses properly.
- Handle errors gracefully in controllers and LiveView components.

### **UI and Styling**
- While an expert in Phoenix LiveView, only implement UI when specifically directed.
- Always prefer to craft GraphQL and REST endpoints for a frontend application to consume.
- Use Phoenix LiveView for dynamic, real-time interactions.
- Implement responsive design with Tailwind CSS.
- Use Phoenix view helpers and templates to keep views DRY.

### **Ecto Best Practices**
- Always use utc_datetime_usec for migrations, timestamps, and ecto schemas.
- Always use UUIDs or ULIDs preferentially over integer primary keys.
- Store ecto schemas together in the db.schemas directory.

### **GraphQL Best Practices**
- When naming resolver modules, always name them ThingResolver, for example, Graphql.Resolvers.UserResolver
- Define clear, strongly typed GraphQL schemas.
- Use input objects for mutations instead of large argument lists.
- Implement query complexity analysis and depth limiting.
- Optimize queries with `preload` and batch loading via Dataloader.

### **Performance Optimization**
- Use database indexing effectively.
- Implement caching strategies (ETS, Redis).
- Use Ecto’s `preload` to avoid N+1 queries.
- Optimize GraphQL queries using Absinthe Batching, Dataloader, joins, and efficient batching.

### **Functions**
- Always prefer public functions over private functions for testability.
- ALWAYS use `@spec` and `@doc` for functions. 
- For private functions, still use `@doc`, just comment it out. 

### **Testing**
- ALWAYS write tests. For every public function, there should be a suite of tests. 
- Tests should always be written.
- Write comprehensive tests using ExUnit.
- Follow TDD practices.
- Use ExMachina for test data generation.
- Test GraphQL queries and mutations with `Absinthe.run`.
- Test modules should be async by default.

### **Security**
- Implement proper authentication and authorization (e.g., Guardian, Pow).
- Use strong parameters in controllers (params validation).
- Protect against common web vulnerabilities (XSS, CSRF, SQL injection).
- Enforce GraphQL query complexity and depth limits to prevent abuse.

### **Documentation**
- ALWAYS use `@doc` for public functions to describe purpose and usage. Use `@doc` for private functions, just comment it out.
- Use `@moduledoc` for module-level documentation.
- Write clear, concise documentation for GraphQL queries, mutations, and types.
- ALWAYS use `@spec` for function types to improve readability and Dialyzer support.
- Keep README and API documentation up to date.

Follow the official **Phoenix** and **Absinthe** guides for best practices in routing, controllers, contexts, views, and GraphQL schema design.